[{"/home/spav/Documents/Kurs/Assigment-4/client/src/index.js":"1","/home/spav/Documents/Kurs/Assigment-4/client/src/config.js":"2","/home/spav/Documents/Kurs/Assigment-4/client/src/store/store.js":"3","/home/spav/Documents/Kurs/Assigment-4/client/src/App.js":"4","/home/spav/Documents/Kurs/Assigment-4/client/src/utils/apollo-client.js":"5","/home/spav/Documents/Kurs/Assigment-4/client/src/store/auth.js":"6","/home/spav/Documents/Kurs/Assigment-4/client/src/utils/graphql.js":"7","/home/spav/Documents/Kurs/Assigment-4/client/src/pages/AuthLayout.js":"8","/home/spav/Documents/Kurs/Assigment-4/client/src/pages/AppLayout.js":"9","/home/spav/Documents/Kurs/Assigment-4/client/src/pages/Auth/SignUp.js":"10","/home/spav/Documents/Kurs/Assigment-4/client/src/pages/Auth/SignIn.js":"11","/home/spav/Documents/Kurs/Assigment-4/client/src/components/Table.js":"12","/home/spav/Documents/Kurs/Assigment-4/client/src/components/Checkbox.js":"13","/home/spav/Documents/Kurs/Assigment-4/client/src/hooks/useCheckbox.js":"14","/home/spav/Documents/Kurs/Assigment-4/client/src/hooks/useForm.js":"15"},{"size":653,"mtime":1623660912743,"results":"16","hashOfConfig":"17"},{"size":117,"mtime":1623665049264,"results":"18","hashOfConfig":"17"},{"size":501,"mtime":1623527986911,"results":"19","hashOfConfig":"17"},{"size":816,"mtime":1623656573999,"results":"20","hashOfConfig":"17"},{"size":2483,"mtime":1623656654238,"results":"21","hashOfConfig":"17"},{"size":482,"mtime":1623522630538,"results":"22","hashOfConfig":"17"},{"size":1221,"mtime":1623655276020,"results":"23","hashOfConfig":"17"},{"size":557,"mtime":1623656678225,"results":"24","hashOfConfig":"17"},{"size":1562,"mtime":1623657064212,"results":"25","hashOfConfig":"17"},{"size":2069,"mtime":1623649521306,"results":"26","hashOfConfig":"17"},{"size":1847,"mtime":1623658135363,"results":"27","hashOfConfig":"17"},{"size":4248,"mtime":1623658117591,"results":"28","hashOfConfig":"17"},{"size":171,"mtime":1623527170119,"results":"29","hashOfConfig":"17"},{"size":835,"mtime":1623527218825,"results":"30","hashOfConfig":"17"},{"size":579,"mtime":1623658059466,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1814oob",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},"/home/spav/Documents/Kurs/Assigment-4/client/src/index.js",[],"/home/spav/Documents/Kurs/Assigment-4/client/src/config.js",[],"/home/spav/Documents/Kurs/Assigment-4/client/src/store/store.js",[],"/home/spav/Documents/Kurs/Assigment-4/client/src/App.js",[],"/home/spav/Documents/Kurs/Assigment-4/client/src/utils/apollo-client.js",[],"/home/spav/Documents/Kurs/Assigment-4/client/src/store/auth.js",[],"/home/spav/Documents/Kurs/Assigment-4/client/src/utils/graphql.js",[],"/home/spav/Documents/Kurs/Assigment-4/client/src/pages/AuthLayout.js",[],"/home/spav/Documents/Kurs/Assigment-4/client/src/pages/AppLayout.js",["67","68","69"],"import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, withRouter } from 'react-router-dom';\nimport { useStore } from '../store/store';\nimport { SET_AUTH_USER } from '../store/auth';\nimport { TableUsers } from '../components/Table';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { GET_ALL_USERS, LOG_OUT } from '../utils/graphql';\nimport { Button, Container } from 'react-bootstrap';\n\nconst AppLayout = ({ location, authUser, refetch:refetchUser }) => {\n  const [{ auth }, dispatch] = useStore();\n\n\n  useEffect(() => {\n    dispatch({ type: SET_AUTH_USER, payload: authUser });\n  }, [dispatch, authUser]);\n\n  const {data, loading, error, refetch: refetchAllUsers} = useQuery(GET_ALL_USERS)\n\n  const users = data ? data?.allUsers : [];\n  const userId = auth?.user?.id;\n  const [logout, {loading: loadingLogout}] = useMutation(LOG_OUT)\n\n  const handlerLogOut = async () => {\n    window.localStorage.removeItem('token');\n    await logout({\n      variables: {\n        userId\n      }\n    })\n    await refetchUser()\n  }\n\n  if (!auth.user) return null;\n  if(loading) return (<div>Loading...</div>)\n\n  return (\n    <Container className=\"vh-100\">\n    <Button variant=\"danger\" onClick={handlerLogOut}>Log Out</Button>\n    {data && <TableUsers data={users} refetchUser={refetchUser} loadingAllUsers={loading} refetchAllUsers={refetchAllUsers}/>}\n    </Container>\n  );\n};\n\nAppLayout.propTypes = {\n  location: PropTypes.object.isRequired,\n  authUser: PropTypes.object.isRequired,\n};\n\nexport default withRouter(AppLayout);","/home/spav/Documents/Kurs/Assigment-4/client/src/pages/Auth/SignUp.js",["70","71","72"],"import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { Button,  Form, Row } from 'react-bootstrap'\nimport PropTypes from 'prop-types';\n\nimport { GET_ALL_USERS, SIGN_UP } from '../../utils/graphql';\nimport useForm from '../../hooks/useForm';\n\nconst SignUp = ({ history, refetch }) => {\n    const [error, setError] = useState('');\n    const {inputs, handleChange} = useForm({\n      email: '',\n      name: '',\n      password: ''\n    })\n\n  const [signup, { loading }] = useMutation(SIGN_UP);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      const response = await signup({\n        variables:  {\n          userInput: inputs,\n      },    \n      refetchQueries: [{query: GET_ALL_USERS}]\n      });\n      localStorage.setItem('token', response.data.signup.token);\n      await refetch();\n      history.push('/');\n    } catch (error) {\n      setError(error.graphQLErrors[0].message);\n    }\n  };\n\n\n  return (\n    <>\n            <Form onSubmit={handleSubmit}>\n              <Form.Group>\n              <Form.Label>E-Mail</Form.Label>\n                <Form.Control name=\"email\" type=\"text\" value={inputs.email} placeholder=\"email\" onChange={handleChange} />\n              </Form.Group>\n              <Form.Group>\n              <Form.Label>Name</Form.Label>\n                <Form.Control name=\"name\" type=\"text\" value={inputs.name} placeholder=\"name\" onChange={handleChange} />\n              </Form.Group>\n              <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control type=\"password\" name=\"password\" value={inputs.password} placeholder=\"Пароль\" onChange={handleChange}/>\n              </Form.Group>\n              <Button variant=\"primary\" type=\"submit\">\n                Sign Up\n              </Button>\n            </Form>\n        \n    </>\n  );\n};\n\nSignUp.propTypes = {\n  history: PropTypes.object.isRequired,\n  refetch: PropTypes.func.isRequired,\n};\n\nexport default withRouter(SignUp);","/home/spav/Documents/Kurs/Assigment-4/client/src/pages/Auth/SignIn.js",["73","74","75","76"],"import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter, Redirect, Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { GET_ALL_USERS, SIGN_IN } from '../../utils/graphql';\nimport useForm from '../../hooks/useForm';\nimport { Button, Form} from 'react-bootstrap';\n\n\nconst SignIn = ({ history, location, refetch }) => {\n  const {inputs, handleChange} = useForm({\n    email: '',\n    password: ''\n  });\n  const [error, setError] = useState('');\n  const [signin, { loading }] = useMutation(SIGN_IN);\n\n\n  useEffect(() => {\n    setError('');\n  }, [location.pathname]);\n\n\n  const handleSubmitSignIn = async (e) => {\n    e.preventDefault();\n\n    try {\n      const response = await signin({\n        variables: {  email, password  },\n        refetchQueries: [{query: GET_ALL_USERS}]\n      });\n      localStorage.setItem('token', response.data.signin.token);\n      await refetch();\n      history.push('/');\n    } catch (error) {\n      setError(error.graphQLErrors[0].message);\n    }\n  };\n\n  const { email, password } = inputs;\n\n  return (\n    \n      <Form onSubmit={handleSubmitSignIn}>\n        <Form.Group>\n        <Form.Label>E-Mail</Form.Label>\n          <Form.Control name=\"email\" type=\"text\" value={email} placeholder=\"email\" onChange={handleChange} />\n        </Form.Group>\n    \n        <Form.Group controlId=\"formBasicPassword\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control type=\"password\" name=\"password\" value={password} placeholder=\"password\" onChange={handleChange}/>\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Sign In\n        </Button>\n      </Form>\n   \n  );\n};\n\nSignIn.propTypes = {\n  history: PropTypes.object.isRequired,\n  refetch: PropTypes.func.isRequired,\n};\n\nexport default withRouter(SignIn);","/home/spav/Documents/Kurs/Assigment-4/client/src/components/Table.js",["77","78","79","80","81","82","83","84"],"import React, { useEffect, useState } from 'react'\n\nimport { Button, ButtonGroup, Container, Row, Table  } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { BLOCK_USERS, DELETE_USERS, UNBLOCK_USERS } from '../utils/graphql';\nimport useCheckbox from '../hooks/useCheckbox';\nimport { Checkbox } from './Checkbox';\n\nfunction conversionDate(data) {\n  let date = new Date(+data);\n  date = date.toString().split(' ')\n  return `${date[2]} ${date[1]} ${date[3]} ${date[4]}`;\n}\n\nfunction keyId(checkeds){\n  return Object.keys(Object.fromEntries(Object.entries(checkeds).filter(([key,value]) => {\n    return value !== false\n  })));\n}\n\nexport const TableUsers = ({data, refetchUser,refetchAllUsers}) => {\n    const [users, setUsers] = useState([])\n\n    const {checkeds, handleChange, handleChangeAll, handleChangeNo} = useCheckbox(users)\n\n    const[deleteUsers,{ loading: loadingDelete, error: errorDelete}] = useMutation(DELETE_USERS)\n    \n    const[blockUsers,{ loading: loadingBlock, error: errorBlock}] = useMutation(BLOCK_USERS)\n    const[unBlockUsers,{ loading: loadingUnBlock, error: errorUnBlock}] = useMutation(UNBLOCK_USERS)\n    const handlerBlock = async() => {\n      try {\n        const blockId = keyId(checkeds);\n\n        await blockUsers({\n          variables:  {\n            usersIds:blockId,\n        },    \n        })\n        await refetchUser()\n        await refetchAllUsers()\n      }catch(e) {\n        console.log(e);\n      }\n    } \n\n    const handlerUnBlock = async() => {\n      try {\n        const unBlockId = keyId(checkeds);\n        \n        await unBlockUsers({\n          variables:  {\n            usersIds:unBlockId,\n        },    \n        })\n        await refetchUser()\n        await refetchAllUsers()\n      }catch(e) {\n        console.log(e);\n      }\n    }\n\n    const handlerDelete = async () => {\n      try {\n        const deleteId = keyId(checkeds)\n\n        await deleteUsers({\n          variables:  {\n            usersIds:deleteId,\n        },    \n        })\n        await refetchUser()\n        await refetchAllUsers()\n      }catch(e) {\n        console.log(e);\n      }\n    }    \n    \n    const handlerRefetch = async () => {\n      try{\n        await refetchAllUsers()\n        await refetchUser()\n      }catch(e){\n        console.log(e);\n      }\n    }\n    useEffect(async() => {\n        setUsers(data)\n        await refetchAllUsers()\n    }, [data])\n  \n\n    return (\n      <Container>\n      <Row className=\"justify-content-center\">\n        <ButtonGroup>\n          <Button onClick={handlerBlock}>Block</Button>\n          <Button onClick={handlerUnBlock}>UnBlock</Button>\n          <Button variant=\"danger\" onClick={handlerDelete}>Delete</Button>\n          <Button variant=\"success\" onClick={handlerRefetch}>UpdateUsers</Button>\n        </ButtonGroup>\n      </Row>\n      \n        <Table striped bordered hover >\n            <thead>\n              <tr>\n                <th>\n                <ButtonGroup size=\"sm\">\n                  <Button onClick={handleChangeAll}>\n                  All\n                  </Button>\n                  <Button onClick={handleChangeNo}>\n                  No\n                  </Button>\n                </ButtonGroup>\n                \n                </th>\n                <th>Id</th>\n                <th>Name</th>\n                <th>Email</th>\n                <th>Date</th>\n                <th>Last Login</th>\n                <th>Online Offline</th>\n                <th>Status Block</th>\n              </tr>\n            </thead>\n            <tbody>\n            {users.map((u, i)=> {\n            return (\n                <tr key={u.id}>\n                  <td>\n                  <Checkbox name={u.id} checked={checkeds[u.id]} onChange={handleChange} />\n                  </td>\n                  <td>{u.id}</td>\n                  <td>{u.name}</td>\n                  <td>{u.email}</td>\n                  <td>{conversionDate(u.createdAt)}</td>\n                  <td>{conversionDate(u.lastLoginAt)}</td>\n                  <td>{u.isOnline === true ? 'Online' : 'Offline'}</td>\n                  <td>{u.active === true ? 'Not Blocked' : 'Blocked'}</td>\n                </tr>\n            )\n            })\n            }\n        </tbody>\n        </Table>\n        </Container>\n    )\n}\n\n\n","/home/spav/Documents/Kurs/Assigment-4/client/src/components/Checkbox.js",[],"/home/spav/Documents/Kurs/Assigment-4/client/src/hooks/useCheckbox.js",[],"/home/spav/Documents/Kurs/Assigment-4/client/src/hooks/useForm.js",["85"],"import { useEffect, useState } from \"react\";\n\nexport default function useForm(initial = {}) {\n  const [inputs, setInputs] = useState(initial);\n  const initialValue = Object.values(initial).join('');\n  \n  useEffect(() => {\n    setInputs(initial)\n  }, [initialValue])\n\n  function handleChange(e) {\n    let {value, name, type} = e.target\n    if(type === 'number') {\n      value = parseInt(value)\n    }\n    if(type === 'file') {\n      [value] = e.target.files\n    }\n    setInputs({ \n      ...inputs,\n      [name]: value\n    })\n  }\n  \n  \n  return {\n    inputs,\n    handleChange,\n  }\n}",{"ruleId":"86","severity":1,"message":"87","line":3,"column":10,"nodeType":"88","messageId":"89","endLine":3,"endColumn":14},{"ruleId":"86","severity":1,"message":"90","line":19,"column":25,"nodeType":"88","messageId":"89","endLine":19,"endColumn":30},{"ruleId":"86","severity":1,"message":"91","line":23,"column":28,"nodeType":"88","messageId":"89","endLine":23,"endColumn":41},{"ruleId":"86","severity":1,"message":"92","line":4,"column":25,"nodeType":"88","messageId":"89","endLine":4,"endColumn":28},{"ruleId":"86","severity":1,"message":"90","line":11,"column":12,"nodeType":"88","messageId":"89","endLine":11,"endColumn":17},{"ruleId":"86","severity":1,"message":"93","line":18,"column":20,"nodeType":"88","messageId":"89","endLine":18,"endColumn":27},{"ruleId":"86","severity":1,"message":"94","line":3,"column":22,"nodeType":"88","messageId":"89","endLine":3,"endColumn":30},{"ruleId":"86","severity":1,"message":"87","line":3,"column":32,"nodeType":"88","messageId":"89","endLine":3,"endColumn":36},{"ruleId":"86","severity":1,"message":"90","line":15,"column":10,"nodeType":"88","messageId":"89","endLine":15,"endColumn":15},{"ruleId":"86","severity":1,"message":"93","line":16,"column":20,"nodeType":"88","messageId":"89","endLine":16,"endColumn":27},{"ruleId":"86","severity":1,"message":"95","line":26,"column":34,"nodeType":"88","messageId":"89","endLine":26,"endColumn":47},{"ruleId":"86","severity":1,"message":"96","line":26,"column":56,"nodeType":"88","messageId":"89","endLine":26,"endColumn":67},{"ruleId":"86","severity":1,"message":"97","line":28,"column":33,"nodeType":"88","messageId":"89","endLine":28,"endColumn":45},{"ruleId":"86","severity":1,"message":"98","line":28,"column":54,"nodeType":"88","messageId":"89","endLine":28,"endColumn":64},{"ruleId":"86","severity":1,"message":"99","line":29,"column":35,"nodeType":"88","messageId":"89","endLine":29,"endColumn":49},{"ruleId":"86","severity":1,"message":"100","line":29,"column":58,"nodeType":"88","messageId":"89","endLine":29,"endColumn":70},{"ruleId":"101","severity":1,"message":"102","line":86,"column":15,"nodeType":"103","endLine":89,"endColumn":6},{"ruleId":"101","severity":1,"message":"104","line":89,"column":8,"nodeType":"105","endLine":89,"endColumn":14,"suggestions":"106"},{"ruleId":"101","severity":1,"message":"107","line":9,"column":6,"nodeType":"105","endLine":9,"endColumn":20,"suggestions":"108"},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'loadingLogout' is assigned a value but never used.","'Row' is defined but never used.","'loading' is assigned a value but never used.","'Redirect' is defined but never used.","'loadingDelete' is assigned a value but never used.","'errorDelete' is assigned a value but never used.","'loadingBlock' is assigned a value but never used.","'errorBlock' is assigned a value but never used.","'loadingUnBlock' is assigned a value but never used.","'errorUnBlock' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'refetchAllUsers'. Either include it or remove the dependency array. If 'refetchAllUsers' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["109"],"React Hook useEffect has a missing dependency: 'initial'. Either include it or remove the dependency array. If 'setInputs' needs the current value of 'initial', you can also switch to useReducer instead of useState and read 'initial' in the reducer.",["110"],{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},"Update the dependencies array to be: [data, refetchAllUsers]",{"range":"115","text":"116"},"Update the dependencies array to be: [initial, initialValue]",{"range":"117","text":"118"},[2386,2392],"[data, refetchAllUsers]",[250,264],"[initial, initialValue]"]