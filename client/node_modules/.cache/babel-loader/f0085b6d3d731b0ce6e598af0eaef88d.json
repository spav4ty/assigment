{"ast":null,"code":"import { ApolloClient, ApolloLink, Observable, split, InMemoryCache } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { onError } from '@apollo/client/link/error';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { createUploadLink } from 'apollo-upload-client';\n/**\n * Creates a Apollo Link, that adds authentication token to request\n */\n\nconst createAuthLink = () => {\n  const request = operation => {\n    const token = localStorage.getItem('token');\n    console.log(token, operation);\n    operation.setContext({\n      authorization: token\n    });\n  };\n\n  return new ApolloLink((operation, forward) => new Observable(observer => {\n    console.log(observer);\n    let handle;\n    console.log(operation);\n    Promise.resolve(operation).then(oper => request(oper)).then(() => {\n      handle = forward(operation).subscribe({\n        next: observer.next.bind(observer),\n        error: observer.error.bind(observer),\n        complete: observer.complete.bind(observer)\n      });\n    }).catch(observer.error.bind(observer));\n    console.log(handle);\n    return () => {\n      if (handle) handle.unsubscribe();\n    };\n  }));\n};\n/**\n * Helper functions that handles error cases\n */\n\n\nconst handleErrors = () => {\n  return onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    if (graphQLErrors) {\n      graphQLErrors.map(({\n        message,\n        locations,\n        path\n      }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n    }\n\n    if (networkError) {\n      console.log(`[Network error]: ${networkError}`);\n    }\n  });\n};\n\nexport const createApolloClient = (apiUrl, websocketApiUrl) => {\n  const cache = new InMemoryCache();\n  const errorLink = handleErrors();\n  const authLink = createAuthLink();\n  const uploadLink = createUploadLink({\n    uri: apiUrl\n  }); // Upload link also creates an HTTP link\n  // Create WebSocket link\n\n  const authToken = localStorage.getItem('token');\n  const wsLink = new WebSocketLink({\n    uri: websocketApiUrl,\n    options: {\n      //   timeout: 60000,\n      lazy: true,\n      reconnect: true,\n      connectionParams: {\n        headers: {\n          authorization: authToken\n        }\n      }\n    }\n  }); // Temporary fix for early websocket closure resulting in websocket connections not being instantiated\n  // https://github.com/apollographql/subscriptions-transport-ws/issues/377\n  //   wsLink.subscriptionClient.maxConnectTimeGenerator.duration = () =>\n  // wsLink.subscriptionClient.maxConnectTimeGenerator.max;\n  // Split links, so we can send data to each link\n  // depending on what kind of operation is being sent\n\n  const terminatingLink = split(({\n    query\n  }) => {\n    const {\n      kind,\n      operation\n    } = getMainDefinition(query);\n    return kind === 'OperationDefinition' && operation === 'subscription';\n  }, wsLink, uploadLink);\n  return new ApolloClient({\n    link: ApolloLink.from([errorLink, authLink, terminatingLink]),\n    cache\n  });\n};","map":{"version":3,"sources":["/home/spav/Documents/Kurs/Assigment-4/client2/src/utils/apollo-client.js"],"names":["ApolloClient","ApolloLink","Observable","split","InMemoryCache","getMainDefinition","onError","WebSocketLink","createUploadLink","createAuthLink","request","operation","token","localStorage","getItem","console","log","setContext","authorization","forward","observer","handle","Promise","resolve","then","oper","subscribe","next","bind","error","complete","catch","unsubscribe","handleErrors","graphQLErrors","networkError","map","message","locations","path","createApolloClient","apiUrl","websocketApiUrl","cache","errorLink","authLink","uploadLink","uri","authToken","wsLink","options","lazy","reconnect","connectionParams","headers","terminatingLink","query","kind","link","from"],"mappings":"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","sourcesContent":["import { ApolloClient, ApolloLink, Observable, split, InMemoryCache } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { onError } from '@apollo/client/link/error';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { createUploadLink } from 'apollo-upload-client';\n\n/**\n * Creates a Apollo Link, that adds authentication token to request\n */\nconst createAuthLink = () => {\n  const request = (operation) => {\n    const token = localStorage.getItem('token');\n    console.log(token, operation);\n    operation.setContext({      \n        authorization: token,\n    });\n  };\n\n  return new ApolloLink(\n    (operation, forward) =>\n      new Observable((observer) => {\n          console.log(observer);\n        let handle;\n        console.log(operation);\n        Promise.resolve(operation)\n          .then((oper) => request(oper))\n          .then(() => {\n            handle = forward(operation).subscribe({\n              next: observer.next.bind(observer),\n              error: observer.error.bind(observer),\n              complete: observer.complete.bind(observer),\n            });\n          })\n          .catch(observer.error.bind(observer));\n\n          console.log(handle);\n        return () => {\n          if (handle) handle.unsubscribe();\n        };\n      })\n  );\n};\n\n/**\n * Helper functions that handles error cases\n */\nconst handleErrors = () => {\n  return onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors) {\n      graphQLErrors.map(({ message, locations, path }) =>\n        console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`)\n      );\n    }\n\n    if (networkError) {\n      console.log(`[Network error]: ${networkError}`);\n    }\n  });\n};\n\nexport const createApolloClient = (apiUrl, websocketApiUrl) => {\n  const cache = new InMemoryCache();\n\n  const errorLink = handleErrors();\n  const authLink = createAuthLink();\n  const uploadLink = createUploadLink({ uri: apiUrl }); // Upload link also creates an HTTP link\n\n  // Create WebSocket link\n  const authToken = localStorage.getItem('token');\n  const wsLink = new WebSocketLink({\n    uri: websocketApiUrl,\n    options: {\n    //   timeout: 60000,\n      lazy: true,\n      reconnect: true,\n      connectionParams: {\n          headers:\n        {authorization: authToken},\n      },\n    },\n  });\n\n  // Temporary fix for early websocket closure resulting in websocket connections not being instantiated\n  // https://github.com/apollographql/subscriptions-transport-ws/issues/377\n//   wsLink.subscriptionClient.maxConnectTimeGenerator.duration = () =>\n    // wsLink.subscriptionClient.maxConnectTimeGenerator.max;\n\n  // Split links, so we can send data to each link\n  // depending on what kind of operation is being sent\n  const terminatingLink = split(\n    ({ query }) => {\n      const { kind, operation } = getMainDefinition(query);\n      return kind === 'OperationDefinition' && operation === 'subscription';\n    },\n    wsLink,\n    uploadLink\n  );\n\n  return new ApolloClient({\n    link: ApolloLink.from([errorLink, authLink, terminatingLink]),\n    cache,\n  });\n};"]},"metadata":{},"sourceType":"module"}