{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nexport default function useCheckbox(initial = []) {\n  _s();\n\n  const [checkeds, setChecked] = useState({});\n  useEffect(() => {\n    setChecked(() => {\n      return Object.assign({}, ...initial.map((user, i) => {\n        return {\n          [user.id]: false\n        };\n      }));\n    });\n  }, [initial]);\n\n  function handleChange(e) {\n    let {\n      name,\n      checked\n    } = e.target;\n    setChecked({ ...checkeds,\n      [name]: checked\n    });\n  }\n\n  function handler(boolean) {\n    const change = Object.fromEntries(Object.entries(checkeds).map(([key, value]) => [key, boolean]));\n    setChecked(change);\n  }\n\n  function handleChangeAll() {\n    handler(true);\n  }\n\n  function handleChangeNo() {\n    handler(false);\n  }\n\n  return {\n    checkeds,\n    handleChange,\n    handleChangeAll,\n    handleChangeNo\n  };\n}\n\n_s(useCheckbox, \"wkuoffxyU3+gKn0KyEmhZbT7Xrg=\");","map":{"version":3,"sources":["/home/spav/Documents/Kurs/Assigment-4/client2/src/hooks/useCheckbox.js"],"names":["useEffect","useState","useCheckbox","initial","checkeds","setChecked","Object","assign","map","user","i","id","handleChange","e","name","checked","target","handler","boolean","change","fromEntries","entries","key","value","handleChangeAll","handleChangeNo"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,eAAe,SAASC,WAAT,CAAqBC,OAAO,GAAG,EAA/B,EAAmC;AAAA;;AAElD,QAAM,CAACC,QAAD,EAAWC,UAAX,IAAyBJ,QAAQ,CAAC,EAAD,CAAvC;AAEED,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,UAAU,CAAC,MAAM;AACf,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiB,GAAGJ,OAAO,CAACK,GAAR,CAAY,CAACC,IAAD,EAAOC,CAAP,KAAY;AACjD,eAAO;AACJ,WAACD,IAAI,CAACE,EAAN,GAAY;AADR,SAAP;AAID,OAL0B,CAApB,CAAP;AAMA,KAPQ,CAAV;AAQD,GATQ,EASN,CAACR,OAAD,CATM,CAAT;;AAWA,WAASS,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,QAAI;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAkBF,CAAC,CAACG,MAAxB;AAEAX,IAAAA,UAAU,CAAC,EACT,GAAGD,QADM;AACG,OAACU,IAAD,GAAQC;AADX,KAAD,CAAV;AAGD;;AAED,WAASE,OAAT,CAAiBC,OAAjB,EAAyB;AACvB,UAAMC,MAAM,GAAGb,MAAM,CAACc,WAAP,CAAmBd,MAAM,CAACe,OAAP,CAAejB,QAAf,EAAyBI,GAAzB,CAA6B,CAAC,CAACc,GAAD,EAAMC,KAAN,CAAD,KAAkB,CAACD,GAAD,EAAMJ,OAAN,CAA/C,CAAnB,CAAf;AACAb,IAAAA,UAAU,CAACc,MAAD,CAAV;AACD;;AACD,WAASK,eAAT,GAA0B;AACxBP,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD;;AAED,WAASQ,cAAT,GAAyB;AACvBR,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD;;AACD,SAAO;AACLb,IAAAA,QADK;AAELQ,IAAAA,YAFK;AAGLY,IAAAA,eAHK;AAILC,IAAAA;AAJK,GAAP;AAMD;;GAxCuBvB,W","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport default function useCheckbox(initial = []) {\n\nconst [checkeds, setChecked] = useState({})\n  \n  useEffect(() => {\n    setChecked(() => {\n      return Object.assign({},...initial.map((user, i)=> {\n        return {\n           [user.id]:  false\n          \n        }\n      })\n    )})\n  }, [initial])\n\n  function handleChange(e) {\n    let {name, checked} = e.target;\n    \n    setChecked({\n      ...checkeds,[name]: checked\n    })\n  }\n\n  function handler(boolean){\n    const change = Object.fromEntries(Object.entries(checkeds).map(([key, value]) => [key, boolean]))\n    setChecked(change) \n  }\n  function handleChangeAll(){\n    handler(true)\n  }\n\n  function handleChangeNo(){\n    handler(false)\n  }\n  return {\n    checkeds,\n    handleChange,\n    handleChangeAll,\n    handleChangeNo\n  }\n}\n"]},"metadata":{},"sourceType":"module"}