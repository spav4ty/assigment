{"ast":null,"code":"import { ApolloClient, ApolloLink, Observable, split, InMemoryCache } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { onError } from '@apollo/client/link/error';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { createUploadLink } from 'apollo-upload-client';\n/**\n * Creates a Apollo Link, that adds authentication token to request\n */\n\nconst createAuthLink = () => {\n  const request = (operation, forward) => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token\n      }\n    });\n  };\n\n  return new ApolloLink((operation, forward) => new Observable(observer => {\n    let handle;\n    Promise.resolve(operation).then(oper => request(oper)).then(() => {\n      handle = forward(operation).subscribe({\n        next: observer.next.bind(observer),\n        error: observer.error.bind(observer),\n        complete: observer.complete.bind(observer)\n      });\n    }).catch(observer.error.bind(observer));\n    return () => {\n      console.log(handle);\n      if (handle) handle.unsubscribe();\n    };\n  }));\n};\n/**\n * Helper functions that handles error cases\n */\n\n\nconst handleErrors = () => {\n  return onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    if (graphQLErrors) {\n      graphQLErrors.map(({\n        message,\n        locations,\n        path\n      }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n    }\n\n    if (networkError) {\n      console.log(`[Network error]: ${networkError}`);\n    }\n  });\n};\n\nexport const createApolloClient = (apiUrl, websocketApiUrl) => {\n  const cache = new InMemoryCache();\n  const errorLink = handleErrors();\n  const authLink = createAuthLink();\n  const uploadLink = createUploadLink({\n    uri: apiUrl\n  }); // Upload link also creates an HTTP link\n  // Create WebSocket link\n\n  const authToken = localStorage.getItem('token');\n  consile.log(authToken);\n  const wsLink = new WebSocketLink({\n    uri: websocketApiUrl,\n    options: {\n      timeout: 60000,\n      reconnect: true,\n      connectionParams: {\n        authorization: authToken\n      }\n    }\n  }); // Temporary fix for early websocket closure resulting in websocket connections not being instantiated\n  // https://github.com/apollographql/subscriptions-transport-ws/issues/377\n\n  wsLink.subscriptionClient.maxConnectTimeGenerator.duration = () => wsLink.subscriptionClient.maxConnectTimeGenerator.max; // Split links, so we can send data to each link\n  // depending on what kind of operation is being sent\n\n\n  const terminatingLink = split(({\n    query\n  }) => {\n    const {\n      kind,\n      operation\n    } = getMainDefinition(query);\n    return kind === 'OperationDefinition' && operation === 'subscription';\n  }, wsLink, uploadLink);\n  return new ApolloClient({\n    link: ApolloLink.from([errorLink, authLink, terminatingLink]),\n    cache\n  });\n};","map":{"version":3,"sources":["/home/spav/Documents/Kurs/Assigment-4/client2/src/utils/apollo-client.js"],"names":["ApolloClient","ApolloLink","Observable","split","InMemoryCache","getMainDefinition","onError","WebSocketLink","createUploadLink","createAuthLink","request","operation","forward","token","localStorage","getItem","setContext","headers","authorization","observer","handle","Promise","resolve","then","oper","subscribe","next","bind","error","complete","catch","console","log","unsubscribe","handleErrors","graphQLErrors","networkError","map","message","locations","path","createApolloClient","apiUrl","websocketApiUrl","cache","errorLink","authLink","uploadLink","uri","authToken","consile","wsLink","options","timeout","reconnect","connectionParams","subscriptionClient","maxConnectTimeGenerator","duration","max","terminatingLink","query","kind","link","from"],"mappings":"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","sourcesContent":["import { ApolloClient, ApolloLink, Observable, split, InMemoryCache } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { onError } from '@apollo/client/link/error';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { createUploadLink } from 'apollo-upload-client';\n\n/**\n * Creates a Apollo Link, that adds authentication token to request\n */\nconst createAuthLink = () => {\n  const request = (operation, forward) => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token,\n      },\n    });\n  };\n\n  return new ApolloLink(\n    (operation, forward) =>\n      new Observable((observer) => {\n        let handle;\n        Promise.resolve(operation)\n          .then((oper) => request(oper))\n          .then(() => {\n            handle = forward(operation).subscribe({\n              next: observer.next.bind(observer),\n              error: observer.error.bind(observer),\n              complete: observer.complete.bind(observer),\n            });\n          })\n          .catch(observer.error.bind(observer));\n\n        return () => {\n          console.log(handle);\n          if (handle) handle.unsubscribe();\n        };\n      })\n  );\n};\n\n/**\n * Helper functions that handles error cases\n */\nconst handleErrors = () => {\n  return onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors) {\n      graphQLErrors.map(({ message, locations, path }) =>\n        console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`)\n      );\n    }\n\n    if (networkError) {\n      console.log(`[Network error]: ${networkError}`);\n    }\n  });\n};\n\nexport const createApolloClient = (apiUrl, websocketApiUrl) => {\n  const cache = new InMemoryCache();\n\n  const errorLink = handleErrors();\n  const authLink = createAuthLink();\n  const uploadLink = createUploadLink({ uri: apiUrl }); // Upload link also creates an HTTP link\n\n  // Create WebSocket link\n  const authToken = localStorage.getItem('token');\n  consile.log(authToken )\n  const wsLink = new WebSocketLink({\n    uri: websocketApiUrl,\n    options: {\n      timeout: 60000,\n      reconnect: true,\n      connectionParams: {\n        authorization: authToken,\n      },\n    },\n  });\n\n  // Temporary fix for early websocket closure resulting in websocket connections not being instantiated\n  // https://github.com/apollographql/subscriptions-transport-ws/issues/377\n  wsLink.subscriptionClient.maxConnectTimeGenerator.duration = () =>\n    wsLink.subscriptionClient.maxConnectTimeGenerator.max;\n\n  // Split links, so we can send data to each link\n  // depending on what kind of operation is being sent\n  const terminatingLink = split(\n    ({ query }) => {\n      const { kind, operation } = getMainDefinition(query);\n      return kind === 'OperationDefinition' && operation === 'subscription';\n    },\n    wsLink,\n    uploadLink\n  );\n\n  return new ApolloClient({\n    link: ApolloLink.from([errorLink, authLink, terminatingLink]),\n    cache,\n  });\n};"]},"metadata":{},"sourceType":"module"}