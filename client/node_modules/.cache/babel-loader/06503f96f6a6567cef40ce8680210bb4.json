{"ast":null,"code":"import{ApolloClient,ApolloLink,Observable,split,InMemoryCache}from'@apollo/client';import{getMainDefinition}from'@apollo/client/utilities';import{onError}from'@apollo/client/link/error';import{WebSocketLink}from'@apollo/client/link/ws';import{createUploadLink}from'apollo-upload-client';var createAuthLink=function createAuthLink(){var request=function request(operation,forward){var token=localStorage.getItem('token');operation.setContext({headers:{authorization:token}});};return new ApolloLink(function(operation,forward){return new Observable(function(observer){var handle;Promise.resolve(operation).then(function(oper){return request(oper);}).then(function(){handle=forward(operation).subscribe({next:observer.next.bind(observer),error:observer.error.bind(observer),complete:observer.complete.bind(observer)});}).catch(observer.error.bind(observer));return function(){if(handle)handle.unsubscribe();};});});};var handleErrors=function handleErrors(){return onError(function(_ref){var graphQLErrors=_ref.graphQLErrors,networkError=_ref.networkError;if(graphQLErrors){graphQLErrors.map(function(_ref2){var message=_ref2.message,locations=_ref2.locations,path=_ref2.path;return console.log(\"[GraphQL error]: Message: \".concat(message,\", Location: \").concat(locations,\", Path: \").concat(path));});}if(networkError){console.log(\"[Network error]: \".concat(networkError));}});};export var createApolloClient=function createApolloClient(apiUrl,websocketApiUrl){var cache=new InMemoryCache();var errorLink=handleErrors();var authLink=createAuthLink();var uploadLink=createUploadLink({uri:apiUrl});var authToken=localStorage.getItem('token');var wsLink=new WebSocketLink({uri:websocketApiUrl,options:{timeout:60000,reconnect:true,connectionParams:{authorization:authToken}}});wsLink.subscriptionClient.maxConnectTimeGenerator.duration=function(){return wsLink.subscriptionClient.maxConnectTimeGenerator.max;};var terminatingLink=split(function(_ref3){var query=_ref3.query;var _getMainDefinition=getMainDefinition(query),kind=_getMainDefinition.kind,operation=_getMainDefinition.operation;return kind==='OperationDefinition'&&operation==='subscription';},wsLink,uploadLink);return new ApolloClient({link:ApolloLink.from([errorLink,authLink,terminatingLink]),cache:cache});};","map":{"version":3,"sources":["/home/spav/Documents/Kurs/Assigment-4/client/src/utils/apollo-client.js"],"names":["ApolloClient","ApolloLink","Observable","split","InMemoryCache","getMainDefinition","onError","WebSocketLink","createUploadLink","createAuthLink","request","operation","forward","token","localStorage","getItem","setContext","headers","authorization","observer","handle","Promise","resolve","then","oper","subscribe","next","bind","error","complete","catch","unsubscribe","handleErrors","graphQLErrors","networkError","map","message","locations","path","console","log","createApolloClient","apiUrl","websocketApiUrl","cache","errorLink","authLink","uploadLink","uri","authToken","wsLink","options","timeout","reconnect","connectionParams","subscriptionClient","maxConnectTimeGenerator","duration","max","terminatingLink","query","kind","link","from"],"mappings":"AAAA,OAASA,YAAT,CAAuBC,UAAvB,CAAmCC,UAAnC,CAA+CC,KAA/C,CAAsDC,aAAtD,KAA2E,gBAA3E,CACA,OAASC,iBAAT,KAAkC,0BAAlC,CACA,OAASC,OAAT,KAAwB,2BAAxB,CACA,OAASC,aAAT,KAA8B,wBAA9B,CACA,OAASC,gBAAT,KAAiC,sBAAjC,CAGA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3B,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,SAAD,CAAYC,OAAZ,CAAwB,CACtC,GAAMC,CAAAA,KAAK,CAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CACAJ,SAAS,CAACK,UAAV,CAAqB,CACnBC,OAAO,CAAE,CACPC,aAAa,CAAEL,KADR,CADU,CAArB,EAKD,CAPD,CASA,MAAO,IAAIZ,CAAAA,UAAJ,CACL,SAACU,SAAD,CAAYC,OAAZ,QACE,IAAIV,CAAAA,UAAJ,CAAe,SAACiB,QAAD,CAAc,CAC3B,GAAIC,CAAAA,MAAJ,CACAC,OAAO,CAACC,OAAR,CAAgBX,SAAhB,EACGY,IADH,CACQ,SAACC,IAAD,QAAUd,CAAAA,OAAO,CAACc,IAAD,CAAjB,EADR,EAEGD,IAFH,CAEQ,UAAM,CACVH,MAAM,CAAGR,OAAO,CAACD,SAAD,CAAP,CAAmBc,SAAnB,CAA6B,CACpCC,IAAI,CAAEP,QAAQ,CAACO,IAAT,CAAcC,IAAd,CAAmBR,QAAnB,CAD8B,CAEpCS,KAAK,CAAET,QAAQ,CAACS,KAAT,CAAeD,IAAf,CAAoBR,QAApB,CAF6B,CAGpCU,QAAQ,CAAEV,QAAQ,CAACU,QAAT,CAAkBF,IAAlB,CAAuBR,QAAvB,CAH0B,CAA7B,CAAT,CAKD,CARH,EASGW,KATH,CASSX,QAAQ,CAACS,KAAT,CAAeD,IAAf,CAAoBR,QAApB,CATT,EAWA,MAAO,WAAM,CACX,GAAIC,MAAJ,CAAYA,MAAM,CAACW,WAAP,GACb,CAFD,CAGD,CAhBD,CADF,EADK,CAAP,CAoBD,CA9BD,CAgCA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzB,MAAO1B,CAAAA,OAAO,CAAC,cAAqC,IAAlC2B,CAAAA,aAAkC,MAAlCA,aAAkC,CAAnBC,YAAmB,MAAnBA,YAAmB,CAClD,GAAID,aAAJ,CAAmB,CACjBA,aAAa,CAACE,GAAd,CAAkB,mBAAGC,CAAAA,OAAH,OAAGA,OAAH,CAAYC,SAAZ,OAAYA,SAAZ,CAAuBC,IAAvB,OAAuBA,IAAvB,OAChBC,CAAAA,OAAO,CAACC,GAAR,qCAAyCJ,OAAzC,wBAA+DC,SAA/D,oBAAmFC,IAAnF,EADgB,EAAlB,EAGD,CAED,GAAIJ,YAAJ,CAAkB,CAChBK,OAAO,CAACC,GAAR,4BAAgCN,YAAhC,GACD,CACF,CAVa,CAAd,CAWD,CAZD,CAcA,MAAO,IAAMO,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,MAAD,CAASC,eAAT,CAA6B,CAC7D,GAAMC,CAAAA,KAAK,CAAG,GAAIxC,CAAAA,aAAJ,EAAd,CAEA,GAAMyC,CAAAA,SAAS,CAAGb,YAAY,EAA9B,CACA,GAAMc,CAAAA,QAAQ,CAAGrC,cAAc,EAA/B,CACA,GAAMsC,CAAAA,UAAU,CAAGvC,gBAAgB,CAAC,CAAEwC,GAAG,CAAEN,MAAP,CAAD,CAAnC,CAEA,GAAMO,CAAAA,SAAS,CAAGnC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAlB,CACA,GAAMmC,CAAAA,MAAM,CAAG,GAAI3C,CAAAA,aAAJ,CAAkB,CAC/ByC,GAAG,CAAEL,eAD0B,CAE/BQ,OAAO,CAAE,CACPC,OAAO,CAAE,KADF,CAEPC,SAAS,CAAE,IAFJ,CAGPC,gBAAgB,CAAE,CAChBpC,aAAa,CAAE+B,SADC,CAHX,CAFsB,CAAlB,CAAf,CAWAC,MAAM,CAACK,kBAAP,CAA0BC,uBAA1B,CAAkDC,QAAlD,CAA6D,iBAC3DP,CAAAA,MAAM,CAACK,kBAAP,CAA0BC,uBAA1B,CAAkDE,GADS,EAA7D,CAGA,GAAMC,CAAAA,eAAe,CAAGxD,KAAK,CAC3B,eAAe,IAAZyD,CAAAA,KAAY,OAAZA,KAAY,CACb,uBAA4BvD,iBAAiB,CAACuD,KAAD,CAA7C,CAAQC,IAAR,oBAAQA,IAAR,CAAclD,SAAd,oBAAcA,SAAd,CACA,MAAOkD,CAAAA,IAAI,GAAK,qBAAT,EAAkClD,SAAS,GAAK,cAAvD,CACD,CAJ0B,CAK3BuC,MAL2B,CAM3BH,UAN2B,CAA7B,CASA,MAAO,IAAI/C,CAAAA,YAAJ,CAAiB,CACtB8D,IAAI,CAAE7D,UAAU,CAAC8D,IAAX,CAAgB,CAAClB,SAAD,CAAYC,QAAZ,CAAsBa,eAAtB,CAAhB,CADgB,CAEtBf,KAAK,CAALA,KAFsB,CAAjB,CAAP,CAID,CAnCM","sourcesContent":["import { ApolloClient, ApolloLink, Observable, split, InMemoryCache } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { onError } from '@apollo/client/link/error';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { createUploadLink } from 'apollo-upload-client';\n\n\nconst createAuthLink = () => {\n  const request = (operation, forward) => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token,\n      },\n    });\n  };\n\n  return new ApolloLink(\n    (operation, forward) =>\n      new Observable((observer) => {\n        let handle;\n        Promise.resolve(operation)\n          .then((oper) => request(oper))\n          .then(() => {\n            handle = forward(operation).subscribe({\n              next: observer.next.bind(observer),\n              error: observer.error.bind(observer),\n              complete: observer.complete.bind(observer),\n            });\n          })\n          .catch(observer.error.bind(observer));\n\n        return () => {\n          if (handle) handle.unsubscribe();\n        };\n      })\n  );\n};\n\nconst handleErrors = () => {\n  return onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors) {\n      graphQLErrors.map(({ message, locations, path }) =>\n        console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`)\n      );\n    }\n\n    if (networkError) {\n      console.log(`[Network error]: ${networkError}`);\n    }\n  });\n};\n\nexport const createApolloClient = (apiUrl, websocketApiUrl) => {\n  const cache = new InMemoryCache();\n\n  const errorLink = handleErrors();\n  const authLink = createAuthLink();\n  const uploadLink = createUploadLink({ uri: apiUrl });\n\n  const authToken = localStorage.getItem('token');\n  const wsLink = new WebSocketLink({\n    uri: websocketApiUrl,\n    options: {\n      timeout: 60000,\n      reconnect: true,\n      connectionParams: {\n        authorization: authToken,\n      },\n    },\n  });\n\n  wsLink.subscriptionClient.maxConnectTimeGenerator.duration = () =>\n    wsLink.subscriptionClient.maxConnectTimeGenerator.max;\n\n  const terminatingLink = split(\n    ({ query }) => {\n      const { kind, operation } = getMainDefinition(query);\n      return kind === 'OperationDefinition' && operation === 'subscription';\n    },\n    wsLink,\n    uploadLink\n  );\n\n  return new ApolloClient({\n    link: ApolloLink.from([errorLink, authLink, terminatingLink]),\n    cache,\n  });\n};"]},"metadata":{},"sourceType":"module"}