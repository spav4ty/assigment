{"ast":null,"code":"import { ApolloClient, ApolloLink, Observable, split, InMemoryCache } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { onError } from '@apollo/client/link/error';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { createUploadLink } from 'apollo-upload-client';\n/**\n * Creates a Apollo Link, that adds authentication token to request\n */\n\nconst middlewareAuthLink = new ApolloLink((operation, forward) => {\n  // const authorizationHeader = token ? `Bearer ${token}` : null;\n  const token = localStorage.getItem('token');\n  operation.setContext({\n    headers: {\n      authorization: token\n    }\n  });\n  operation.authorization = token ? token : null;\n  return forward(operation);\n}); // const createAuthLink = () => {\n//   const request = (operation, forward) => {\n//     const token = localStorage.getItem('token');\n//     operation.setContext({\n//       headers: {\n//         authorization: token,\n//       },\n//     });\n//   };\n//   return new ApolloLink(\n//     (operation, forward) =>\n//       new Observable((observer) => {\n//         let handle;\n//         Promise.resolve(operation)\n//           .then((oper) => request(oper))\n//           .then(() => {\n//             handle = forward(operation).subscribe({\n//               next: observer.next.bind(observer),\n//               error: observer.error.bind(observer),\n//               complete: observer.complete.bind(observer),\n//             });\n//           })\n//           .catch(observer.error.bind(observer));\n//         return () => {\n//           if (handle) handle.unsubscribe();\n//         };\n//       })\n//   );\n// };\n\n/**\n * Helper functions that handles error cases\n */\n\nconst handleErrors = () => {\n  return onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    if (graphQLErrors) {\n      graphQLErrors.map(({\n        message,\n        locations,\n        path\n      }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n    }\n\n    if (networkError) {\n      console.log(`[Network error]: ${networkError}`);\n    }\n  });\n};\n\nexport const createApolloClient = (apiUrl, websocketApiUrl) => {\n  const cache = new InMemoryCache();\n  const errorLink = handleErrors();\n  const authLink = createAuthLink();\n  const uploadLink = createUploadLink({\n    uri: apiUrl\n  }); // Upload link also creates an HTTP link\n  // Create WebSocket link\n\n  const authToken = localStorage.getItem('token');\n  const wsLink = new WebSocketLink({\n    uri: websocketApiUrl,\n    options: {\n      timeout: 60000,\n      reconnect: true,\n      connectionParams: {\n        authorization: authToken\n      }\n    }\n  }); // Temporary fix for early websocket closure resulting in websocket connections not being instantiated\n  // https://github.com/apollographql/subscriptions-transport-ws/issues/377\n\n  wsLink.subscriptionClient.maxConnectTimeGenerator.duration = () => wsLink.subscriptionClient.maxConnectTimeGenerator.max; // Split links, so we can send data to each link\n  // depending on what kind of operation is being sent\n\n\n  const terminatingLink = split(({\n    query\n  }) => {\n    const {\n      kind,\n      operation\n    } = getMainDefinition(query);\n    return kind === 'OperationDefinition' && operation === 'subscription';\n  }, wsLink, uploadLink);\n  return new ApolloClient({\n    link: ApolloLink.from([errorLink, authLink, terminatingLink]),\n    cache\n  });\n};","map":{"version":3,"sources":["/home/spav/Documents/Kurs/Assigment-4/client2/src/utils/apollo-client.js"],"names":["ApolloClient","ApolloLink","Observable","split","InMemoryCache","getMainDefinition","onError","WebSocketLink","createUploadLink","middlewareAuthLink","operation","forward","token","localStorage","getItem","setContext","headers","authorization","handleErrors","graphQLErrors","networkError","map","message","locations","path","console","log","createApolloClient","apiUrl","websocketApiUrl","cache","errorLink","authLink","createAuthLink","uploadLink","uri","authToken","wsLink","options","timeout","reconnect","connectionParams","subscriptionClient","maxConnectTimeGenerator","duration","max","terminatingLink","query","kind","link","from"],"mappings":"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","sourcesContent":["import { ApolloClient, ApolloLink, Observable, split, InMemoryCache } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { onError } from '@apollo/client/link/error';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { createUploadLink } from 'apollo-upload-client';\n\n/**\n * Creates a Apollo Link, that adds authentication token to request\n */\n\n const middlewareAuthLink = new ApolloLink((operation, forward) => {\n  // const authorizationHeader = token ? `Bearer ${token}` : null;\n    const token = localStorage.getItem('token');\n  operation.setContext( {\n    headers: {\n      authorization: token,\n    }\n  });\n\n  operation.authorization = token ? token : null;\n  return forward(operation);\n });\n\n// const createAuthLink = () => {\n//   const request = (operation, forward) => {\n//     const token = localStorage.getItem('token');\n//     operation.setContext({\n//       headers: {\n//         authorization: token,\n//       },\n//     });\n//   };\n\n//   return new ApolloLink(\n//     (operation, forward) =>\n//       new Observable((observer) => {\n//         let handle;\n//         Promise.resolve(operation)\n//           .then((oper) => request(oper))\n//           .then(() => {\n//             handle = forward(operation).subscribe({\n//               next: observer.next.bind(observer),\n//               error: observer.error.bind(observer),\n//               complete: observer.complete.bind(observer),\n//             });\n//           })\n//           .catch(observer.error.bind(observer));\n\n//         return () => {\n//           if (handle) handle.unsubscribe();\n//         };\n//       })\n//   );\n// };\n\n/**\n * Helper functions that handles error cases\n */\nconst handleErrors = () => {\n  return onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors) {\n      graphQLErrors.map(({ message, locations, path }) =>\n        console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`)\n      );\n    }\n\n    if (networkError) {\n      console.log(`[Network error]: ${networkError}`);\n    }\n  });\n};\n\nexport const createApolloClient = (apiUrl, websocketApiUrl) => {\n  const cache = new InMemoryCache();\n\n  const errorLink = handleErrors();\n  const authLink = createAuthLink();\n  const uploadLink = createUploadLink({ uri: apiUrl }); // Upload link also creates an HTTP link\n\n  // Create WebSocket link\n  const authToken = localStorage.getItem('token');\n  const wsLink = new WebSocketLink({\n    uri: websocketApiUrl,\n    options: {\n      timeout: 60000,\n      reconnect: true,\n      connectionParams: {\n        authorization: authToken,\n      },\n    },\n  });\n\n  // Temporary fix for early websocket closure resulting in websocket connections not being instantiated\n  // https://github.com/apollographql/subscriptions-transport-ws/issues/377\n  wsLink.subscriptionClient.maxConnectTimeGenerator.duration = () =>\n    wsLink.subscriptionClient.maxConnectTimeGenerator.max;\n\n  // Split links, so we can send data to each link\n  // depending on what kind of operation is being sent\n  const terminatingLink = split(\n    ({ query }) => {\n      const { kind, operation } = getMainDefinition(query);\n      return kind === 'OperationDefinition' && operation === 'subscription';\n    },\n    wsLink,\n    uploadLink\n  );\n\n  return new ApolloClient({\n    link: ApolloLink.from([errorLink, authLink, terminatingLink]),\n    cache,\n  });\n};"]},"metadata":{},"sourceType":"module"}