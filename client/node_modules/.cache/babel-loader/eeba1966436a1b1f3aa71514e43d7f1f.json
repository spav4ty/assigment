{"ast":null,"code":"var _jsxFileName = \"/home/spav/Documents/Kurs/Assigment-4/client2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { GlobalStyle } from './GlobalStyles';\nimport { GET_AUTH_USER } from 'graphql/user';\nimport { GET_NEW_CONVERSATIONS_SUBSCRIPTION } from 'graphql/messages';\nimport { NOTIFICATION_CREATED_OR_DELETED } from 'graphql/notification'; // import Message from 'components/Message';\n// import { Loading } from 'components/Loading';\n// import AuthLayout from 'pages/Auth/AuthLayout';\n// import NotFound from 'components/NotFound';\n// import AppLayout from './AppLayout';\n// import ScrollToTop from './ScrollToTop';\n\nimport { useStore } from 'store';\n/**\n * Root component of the app\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [{\n    message\n  }] = useStore();\n  const {\n    loading,\n    subscribeToMore,\n    data,\n    error,\n    refetch\n  } = useQuery(GET_AUTH_USER);\n  useEffect(() => {\n    const unsubscribe = subscribeToMore({\n      document: NOTIFICATION_CREATED_OR_DELETED,\n      updateQuery: async (prev, {\n        subscriptionData\n      }) => {\n        if (!subscriptionData.data) return prev;\n        const oldNotifications = prev.getAuthUser.newNotifications;\n        const {\n          operation,\n          notification\n        } = subscriptionData.data.notificationCreatedOrDeleted;\n        let newNotifications;\n\n        if (operation === 'CREATE') {\n          // Don't show message notification in Header if user already is on notifications page\n          if (window.location.href.split('/')[3] === 'notifications') {\n            return prev;\n          } // Add new notification\n\n\n          newNotifications = [notification, ...oldNotifications];\n        } else {\n          // Remove from notifications\n          const notifications = oldNotifications;\n          const index = notifications.findIndex(n => n.id === notification.id);\n\n          if (index > -1) {\n            notifications.splice(index, 1);\n          }\n\n          newNotifications = notifications;\n        } // Attach new notifications to authUser\n\n\n        const authUser = prev.getAuthUser;\n        authUser.newNotifications = newNotifications;\n        return {\n          getAuthUser: authUser\n        };\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, [subscribeToMore]);\n  useEffect(() => {\n    const unsubscribe = subscribeToMore({\n      document: GET_NEW_CONVERSATIONS_SUBSCRIPTION,\n      updateQuery: (prev, {\n        subscriptionData\n      }) => {\n        if (!subscriptionData.data) return prev;\n        const oldConversations = prev.getAuthUser.newConversations;\n        const {\n          newConversation\n        } = subscriptionData.data; // Don't show message notification in Header if user already is on messages page\n\n        if (window.location.href.split('/')[3] === 'messages') {\n          return prev;\n        } // If authUser already has unseen message from that user,\n        // remove old message, so we can show the new one\n\n\n        const index = oldConversations.findIndex(u => u.id === newConversation.id);\n\n        if (index > -1) {\n          oldConversations.splice(index, 1);\n        } // Merge conversations\n\n\n        const mergeConversations = [newConversation, ...oldConversations]; // Attach new conversation to authUser\n\n        const authUser = prev.getAuthUser;\n        authUser.newConversations = mergeConversations;\n        return {\n          getAuthUser: authUser\n        };\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, [subscribeToMore]);\n  if (loading) return /*#__PURE__*/_jsxDEV(Loading, {\n    top: \"xl\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 23\n  }, this);\n\n  if (error) {\n    const isDevelopment = !process.env.NODE_ENV || process.env.NODE_ENV === 'development';\n\n    if (isDevelopment) {\n      console.error(error);\n    }\n\n    const devErrorMessage = 'Sorry, something went wrong. Please open the browser console to view the detailed error message.';\n    const prodErrorMessage = \"Sorry, something went wrong. We're working on getting this fixed as soon as we can.\";\n    return /*#__PURE__*/_jsxDEV(NotFound, {\n      message: isDevelopment ? devErrorMessage : prodErrorMessage,\n      showHomePageLink: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScrollToTop, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: data.getAuthUser ? /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          render: () => /*#__PURE__*/_jsxDEV(AppLayout, {\n            authUser: data.getAuthUser\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          render: () => /*#__PURE__*/_jsxDEV(AuthLayout, {\n            refetch: refetch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), message.content.text && /*#__PURE__*/_jsxDEV(Message, {\n      type: message.content.type,\n      autoClose: message.content.autoClose,\n      children: message.content.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"lIbacHRt5pH+Hr2wPYSLxk97tyU=\", false, function () {\n  return [useStore, useQuery];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/spav/Documents/Kurs/Assigment-4/client2/src/App.js"],"names":["React","useEffect","useQuery","BrowserRouter","Router","Route","Switch","GlobalStyle","GET_AUTH_USER","GET_NEW_CONVERSATIONS_SUBSCRIPTION","NOTIFICATION_CREATED_OR_DELETED","useStore","App","message","loading","subscribeToMore","data","error","refetch","unsubscribe","document","updateQuery","prev","subscriptionData","oldNotifications","getAuthUser","newNotifications","operation","notification","notificationCreatedOrDeleted","window","location","href","split","notifications","index","findIndex","n","id","splice","authUser","oldConversations","newConversations","newConversation","u","mergeConversations","isDevelopment","process","env","NODE_ENV","console","devErrorMessage","prodErrorMessage","content","text","type","autoClose"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport { GlobalStyle } from './GlobalStyles';\n\nimport { GET_AUTH_USER } from 'graphql/user';\nimport { GET_NEW_CONVERSATIONS_SUBSCRIPTION } from 'graphql/messages';\nimport { NOTIFICATION_CREATED_OR_DELETED } from 'graphql/notification';\n\n// import Message from 'components/Message';\n// import { Loading } from 'components/Loading';\n// import AuthLayout from 'pages/Auth/AuthLayout';\n// import NotFound from 'components/NotFound';\n// import AppLayout from './AppLayout';\n// import ScrollToTop from './ScrollToTop';\n\nimport { useStore } from 'store';\n\n/**\n * Root component of the app\n */\nconst App = () => {\n  const [{ message }] = useStore();\n\n  const { loading, subscribeToMore, data, error, refetch } = useQuery(GET_AUTH_USER);\n\n  useEffect(() => {\n    const unsubscribe = subscribeToMore({\n      document: NOTIFICATION_CREATED_OR_DELETED,\n      updateQuery: async (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        const oldNotifications = prev.getAuthUser.newNotifications;\n        const { operation, notification } = subscriptionData.data.notificationCreatedOrDeleted;\n\n        let newNotifications;\n\n        if (operation === 'CREATE') {\n          // Don't show message notification in Header if user already is on notifications page\n          if (window.location.href.split('/')[3] === 'notifications') {\n            return prev;\n          }\n\n          // Add new notification\n          newNotifications = [notification, ...oldNotifications];\n        } else {\n          // Remove from notifications\n          const notifications = oldNotifications;\n          const index = notifications.findIndex((n) => n.id === notification.id);\n          if (index > -1) {\n            notifications.splice(index, 1);\n          }\n\n          newNotifications = notifications;\n        }\n\n        // Attach new notifications to authUser\n        const authUser = prev.getAuthUser;\n        authUser.newNotifications = newNotifications;\n\n        return { getAuthUser: authUser };\n      },\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [subscribeToMore]);\n\n  useEffect(() => {\n    const unsubscribe = subscribeToMore({\n      document: GET_NEW_CONVERSATIONS_SUBSCRIPTION,\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        const oldConversations = prev.getAuthUser.newConversations;\n        const { newConversation } = subscriptionData.data;\n\n        // Don't show message notification in Header if user already is on messages page\n        if (window.location.href.split('/')[3] === 'messages') {\n          return prev;\n        }\n\n        // If authUser already has unseen message from that user,\n        // remove old message, so we can show the new one\n        const index = oldConversations.findIndex((u) => u.id === newConversation.id);\n        if (index > -1) {\n          oldConversations.splice(index, 1);\n        }\n\n        // Merge conversations\n        const mergeConversations = [newConversation, ...oldConversations];\n\n        // Attach new conversation to authUser\n        const authUser = prev.getAuthUser;\n        authUser.newConversations = mergeConversations;\n\n        return { getAuthUser: authUser };\n      },\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [subscribeToMore]);\n\n  if (loading) return <Loading top=\"xl\" />;\n  if (error) {\n    const isDevelopment = !process.env.NODE_ENV || process.env.NODE_ENV === 'development';\n    if (isDevelopment) {\n      console.error(error);\n    }\n    const devErrorMessage =\n      'Sorry, something went wrong. Please open the browser console to view the detailed error message.';\n    const prodErrorMessage = \"Sorry, something went wrong. We're working on getting this fixed as soon as we can.\";\n    return <NotFound message={isDevelopment ? devErrorMessage : prodErrorMessage} showHomePageLink={false} />;\n  }\n\n  return (\n    <Router>\n      <GlobalStyle />\n\n      <ScrollToTop>\n        <Switch>\n          {data.getAuthUser ? (\n            <Route exact render={() => <AppLayout authUser={data.getAuthUser} />} />\n          ) : (\n            <Route exact render={() => <AuthLayout refetch={refetch} />} />\n          )}\n        </Switch>\n      </ScrollToTop>\n\n      {message.content.text && (\n        <Message type={message.content.type} autoClose={message.content.autoClose}>\n          {message.content.text}\n        </Message>\n      )}\n    </Router>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}