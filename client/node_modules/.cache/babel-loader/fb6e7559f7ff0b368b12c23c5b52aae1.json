{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/home/spav/Documents/Kurs/Assigment-4/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _require = require('@apollo/client/core'),\n    ApolloLink = _require.ApolloLink,\n    Observable = _require.Observable;\n\nvar _require2 = require('@apollo/client/link/http'),\n    createSignalIfSupported = _require2.createSignalIfSupported,\n    fallbackHttpConfig = _require2.fallbackHttpConfig,\n    parseAndCheckHttpResponse = _require2.parseAndCheckHttpResponse,\n    rewriteURIForGET = _require2.rewriteURIForGET,\n    selectHttpOptionsAndBody = _require2.selectHttpOptionsAndBody,\n    selectURI = _require2.selectURI,\n    serializeFetchParameter = _require2.serializeFetchParameter;\n\nvar extractFiles = require('extract-files/public/extractFiles.js');\n\nvar formDataAppendFile = require('./formDataAppendFile.js');\n\nvar isExtractableFile = require('./isExtractableFile.js');\n/**\n * Creates a\n * [terminating Apollo Link](https://apollographql.com/docs/react/api/link/introduction/#the-terminating-link)\n * for [Apollo Client](https://apollographql.com/docs/react) that fetches a\n * [GraphQL multipart request](https://github.com/jaydenseric/graphql-multipart-request-spec)\n * if the GraphQL variables contain files (by default\n * [`FileList`](https://developer.mozilla.org/en-US/docs/Web/API/FileList),\n * [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File),\n * [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob), or\n * [`ReactNativeFile`](#class-reactnativefile) instances), or else fetches a\n * regular\n * [GraphQL POST or GET request](https://apollographql.com/docs/apollo-server/requests)\n * (depending on the config and GraphQL operation).\n *\n * Some of the options are similar to the\n * [`createHttpLink` options](https://apollographql.com/docs/react/api/link/apollo-link-http/#httplink-constructor-options).\n * @see [GraphQL multipart request spec](https://github.com/jaydenseric/graphql-multipart-request-spec).\n * @kind function\n * @name createUploadLink\n * @param {object} options Options.\n * @param {string} [options.uri='/graphql'] GraphQL endpoint URI.\n * @param {boolean} [options.useGETForQueries] Should GET be used to fetch queries, if there are no files to upload.\n * @param {ExtractableFileMatcher} [options.isExtractableFile=isExtractableFile] Customizes how files are matched in the GraphQL operation for extraction.\n * @param {class} [options.FormData] [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) implementation to use, defaulting to the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) global.\n * @param {FormDataFileAppender} [options.formDataAppendFile=formDataAppendFile] Customizes how extracted files are appended to the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) instance.\n * @param {Function} [options.fetch] [`fetch`](https://fetch.spec.whatwg.org) implementation to use, defaulting to the [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) global.\n * @param {FetchOptions} [options.fetchOptions] [`fetch` options]{@link FetchOptions}; overridden by upload requirements.\n * @param {string} [options.credentials] Overrides `options.fetchOptions.credentials`.\n * @param {object} [options.headers] Merges with and overrides `options.fetchOptions.headers`.\n * @param {boolean} [options.includeExtensions=false] Toggles sending `extensions` fields to the GraphQL server.\n * @returns {ApolloLink} A [terminating Apollo Link](https://apollographql.com/docs/react/api/link/introduction/#the-terminating-link).\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { createUploadLink } from 'apollo-upload-client';\n * ```\n *\n * ```js\n * import createUploadLink from 'apollo-upload-client/public/createUploadLink.js';\n * ```\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { createUploadLink } = require('apollo-upload-client');\n * ```\n *\n * ```js\n * const createUploadLink = require('apollo-upload-client/public/createUploadLink.js');\n * ```\n * @example <caption>A basic Apollo Client setup.</caption>\n * ```js\n * import { ApolloClient, InMemoryCache } from '@apollo/client';\n * import createUploadLink from 'apollo-upload-client/public/createUploadLink.js';\n *\n * const client = new ApolloClient({\n *   cache: new InMemoryCache(),\n *   link: createUploadLink(),\n * });\n * ```\n */\n\n\nmodule.exports = function createUploadLink() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$uri = _ref.uri,\n      fetchUri = _ref$uri === void 0 ? '/graphql' : _ref$uri,\n      useGETForQueries = _ref.useGETForQueries,\n      _ref$isExtractableFil = _ref.isExtractableFile,\n      customIsExtractableFile = _ref$isExtractableFil === void 0 ? isExtractableFile : _ref$isExtractableFil,\n      CustomFormData = _ref.FormData,\n      _ref$formDataAppendFi = _ref.formDataAppendFile,\n      customFormDataAppendFile = _ref$formDataAppendFi === void 0 ? formDataAppendFile : _ref$formDataAppendFi,\n      customFetch = _ref.fetch,\n      fetchOptions = _ref.fetchOptions,\n      credentials = _ref.credentials,\n      headers = _ref.headers,\n      includeExtensions = _ref.includeExtensions;\n\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions\n    },\n    options: fetchOptions,\n    credentials: credentials,\n    headers: headers\n  };\n  return new ApolloLink(function (operation) {\n    var context = operation.getContext();\n    var _context$clientAwaren = context.clientAwareness;\n    _context$clientAwaren = _context$clientAwaren === void 0 ? {} : _context$clientAwaren;\n    var name = _context$clientAwaren.name,\n        version = _context$clientAwaren.version,\n        headers = context.headers;\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: _objectSpread(_objectSpread(_objectSpread({}, name && {\n        'apollographql-client-name': name\n      }), version && {\n        'apollographql-client-version': version\n      }), headers)\n    };\n\n    var _selectHttpOptionsAnd = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig),\n        options = _selectHttpOptionsAnd.options,\n        body = _selectHttpOptionsAnd.body;\n\n    var _extractFiles = extractFiles(body, '', customIsExtractableFile),\n        clone = _extractFiles.clone,\n        files = _extractFiles.files;\n\n    var uri = selectURI(operation, fetchUri);\n\n    if (files.size) {\n      // Automatically set by `fetch` when the `body` is a `FormData` instance.\n      delete options.headers['content-type']; // GraphQL multipart request spec:\n      // https://github.com/jaydenseric/graphql-multipart-request-spec\n\n      var RuntimeFormData = CustomFormData || FormData;\n      var form = new RuntimeFormData();\n      form.append('operations', serializeFetchParameter(clone, 'Payload'));\n      var map = {};\n      var i = 0;\n      files.forEach(function (paths) {\n        map[++i] = paths;\n      });\n      form.append('map', JSON.stringify(map));\n      i = 0;\n      files.forEach(function (paths, file) {\n        customFormDataAppendFile(form, ++i, file);\n      });\n      options.body = form;\n    } else {\n      if (useGETForQueries && // If the operation contains some mutations GET shouldn’t be used.\n      !operation.query.definitions.some(function (definition) {\n        return definition.kind === 'OperationDefinition' && definition.operation === 'mutation';\n      })) options.method = 'GET';\n\n      if (options.method === 'GET') {\n        var _rewriteURIForGET = rewriteURIForGET(uri, body),\n            newURI = _rewriteURIForGET.newURI,\n            parseError = _rewriteURIForGET.parseError;\n\n        if (parseError) // Apollo’s `HttpLink` uses `fromError` for this, but it's not\n          // exported from `@apollo/client/link/http`.\n          return new Observable(function (observer) {\n            observer.error(parseError);\n          });\n        uri = newURI;\n      } else options.body = serializeFetchParameter(clone, 'Payload');\n    }\n\n    var _createSignalIfSuppor = createSignalIfSupported(),\n        controller = _createSignalIfSuppor.controller;\n\n    if (controller) {\n      if (options.signal) // Respect the user configured abort controller signal.\n        options.signal.aborted ? // Signal already aborted, so immediately abort.\n        controller.abort() : // Signal not already aborted, so setup a listener to abort when it\n        // does.\n        options.signal.addEventListener('abort', function () {\n          controller.abort();\n        }, {\n          // Prevent a memory leak if the user configured abort controller\n          // is long lasting, or controls multiple things.\n          once: true\n        });\n      options.signal = controller.signal;\n    }\n\n    var runtimeFetch = customFetch || fetch;\n    return new Observable(function (observer) {\n      // Used to track if the observable is being cleaned up.\n      var cleaningUp;\n      runtimeFetch(uri, options).then(function (response) {\n        // Forward the response on the context.\n        operation.setContext({\n          response: response\n        });\n        return response;\n      }).then(parseAndCheckHttpResponse(operation)).then(function (result) {\n        observer.next(result);\n        observer.complete();\n      }).catch(function (error) {\n        // If the observable is being cleaned up, there is no need to call\n        // next or error because there are no more subscribers. An error after\n        // cleanup begins is likely from the cleanup function aborting the\n        // fetch.\n        if (!cleaningUp) {\n          // For errors such as an invalid fetch URI there will be no GraphQL\n          // result with errors or data to forward.\n          if (error.result && error.result.errors && error.result.data) observer.next(error.result);\n          observer.error(error);\n        }\n      }); // Cleanup function.\n\n      return function () {\n        cleaningUp = true; // Abort fetch. It’s ok to signal an abort even when not fetching.\n\n        if (controller) controller.abort();\n      };\n    });\n  });\n};","map":{"version":3,"sources":["/home/spav/Documents/Kurs/Assigment-4/client/node_modules/apollo-upload-client/public/createUploadLink.js"],"names":["require","ApolloLink","Observable","createSignalIfSupported","fallbackHttpConfig","parseAndCheckHttpResponse","rewriteURIForGET","selectHttpOptionsAndBody","selectURI","serializeFetchParameter","extractFiles","formDataAppendFile","isExtractableFile","module","exports","createUploadLink","uri","fetchUri","useGETForQueries","customIsExtractableFile","CustomFormData","FormData","customFormDataAppendFile","customFetch","fetch","fetchOptions","credentials","headers","includeExtensions","linkConfig","http","options","operation","context","getContext","clientAwareness","name","version","contextConfig","body","clone","files","size","RuntimeFormData","form","append","map","i","forEach","paths","JSON","stringify","file","query","definitions","some","definition","kind","method","newURI","parseError","observer","error","controller","signal","aborted","abort","addEventListener","once","runtimeFetch","cleaningUp","then","response","setContext","result","next","complete","catch","errors","data"],"mappings":"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","sourcesContent":["'use strict';\n\nconst { ApolloLink, Observable } = require('@apollo/client/core');\nconst {\n  createSignalIfSupported,\n  fallbackHttpConfig,\n  parseAndCheckHttpResponse,\n  rewriteURIForGET,\n  selectHttpOptionsAndBody,\n  selectURI,\n  serializeFetchParameter,\n} = require('@apollo/client/link/http');\nconst extractFiles = require('extract-files/public/extractFiles.js');\nconst formDataAppendFile = require('./formDataAppendFile.js');\nconst isExtractableFile = require('./isExtractableFile.js');\n\n/**\n * Creates a\n * [terminating Apollo Link](https://apollographql.com/docs/react/api/link/introduction/#the-terminating-link)\n * for [Apollo Client](https://apollographql.com/docs/react) that fetches a\n * [GraphQL multipart request](https://github.com/jaydenseric/graphql-multipart-request-spec)\n * if the GraphQL variables contain files (by default\n * [`FileList`](https://developer.mozilla.org/en-US/docs/Web/API/FileList),\n * [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File),\n * [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob), or\n * [`ReactNativeFile`](#class-reactnativefile) instances), or else fetches a\n * regular\n * [GraphQL POST or GET request](https://apollographql.com/docs/apollo-server/requests)\n * (depending on the config and GraphQL operation).\n *\n * Some of the options are similar to the\n * [`createHttpLink` options](https://apollographql.com/docs/react/api/link/apollo-link-http/#httplink-constructor-options).\n * @see [GraphQL multipart request spec](https://github.com/jaydenseric/graphql-multipart-request-spec).\n * @kind function\n * @name createUploadLink\n * @param {object} options Options.\n * @param {string} [options.uri='/graphql'] GraphQL endpoint URI.\n * @param {boolean} [options.useGETForQueries] Should GET be used to fetch queries, if there are no files to upload.\n * @param {ExtractableFileMatcher} [options.isExtractableFile=isExtractableFile] Customizes how files are matched in the GraphQL operation for extraction.\n * @param {class} [options.FormData] [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) implementation to use, defaulting to the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) global.\n * @param {FormDataFileAppender} [options.formDataAppendFile=formDataAppendFile] Customizes how extracted files are appended to the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) instance.\n * @param {Function} [options.fetch] [`fetch`](https://fetch.spec.whatwg.org) implementation to use, defaulting to the [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) global.\n * @param {FetchOptions} [options.fetchOptions] [`fetch` options]{@link FetchOptions}; overridden by upload requirements.\n * @param {string} [options.credentials] Overrides `options.fetchOptions.credentials`.\n * @param {object} [options.headers] Merges with and overrides `options.fetchOptions.headers`.\n * @param {boolean} [options.includeExtensions=false] Toggles sending `extensions` fields to the GraphQL server.\n * @returns {ApolloLink} A [terminating Apollo Link](https://apollographql.com/docs/react/api/link/introduction/#the-terminating-link).\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { createUploadLink } from 'apollo-upload-client';\n * ```\n *\n * ```js\n * import createUploadLink from 'apollo-upload-client/public/createUploadLink.js';\n * ```\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { createUploadLink } = require('apollo-upload-client');\n * ```\n *\n * ```js\n * const createUploadLink = require('apollo-upload-client/public/createUploadLink.js');\n * ```\n * @example <caption>A basic Apollo Client setup.</caption>\n * ```js\n * import { ApolloClient, InMemoryCache } from '@apollo/client';\n * import createUploadLink from 'apollo-upload-client/public/createUploadLink.js';\n *\n * const client = new ApolloClient({\n *   cache: new InMemoryCache(),\n *   link: createUploadLink(),\n * });\n * ```\n */\nmodule.exports = function createUploadLink({\n  uri: fetchUri = '/graphql',\n  useGETForQueries,\n  isExtractableFile: customIsExtractableFile = isExtractableFile,\n  FormData: CustomFormData,\n  formDataAppendFile: customFormDataAppendFile = formDataAppendFile,\n  fetch: customFetch,\n  fetchOptions,\n  credentials,\n  headers,\n  includeExtensions,\n} = {}) {\n  const linkConfig = {\n    http: { includeExtensions },\n    options: fetchOptions,\n    credentials,\n    headers,\n  };\n\n  return new ApolloLink((operation) => {\n    const context = operation.getContext();\n    const {\n      // Apollo Studio client awareness `name` and `version` can be configured\n      // via `ApolloClient` constructor options:\n      // https://apollographql.com/docs/studio/client-awareness/#using-apollo-server-and-apollo-client\n      clientAwareness: { name, version } = {},\n      headers,\n    } = context;\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: {\n        // Client awareness headers can be overridden by context `headers`.\n        ...(name && { 'apollographql-client-name': name }),\n        ...(version && { 'apollographql-client-version': version }),\n        ...headers,\n      },\n    };\n\n    const { options, body } = selectHttpOptionsAndBody(\n      operation,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig\n    );\n\n    const { clone, files } = extractFiles(body, '', customIsExtractableFile);\n\n    let uri = selectURI(operation, fetchUri);\n\n    if (files.size) {\n      // Automatically set by `fetch` when the `body` is a `FormData` instance.\n      delete options.headers['content-type'];\n\n      // GraphQL multipart request spec:\n      // https://github.com/jaydenseric/graphql-multipart-request-spec\n\n      const RuntimeFormData = CustomFormData || FormData;\n\n      const form = new RuntimeFormData();\n\n      form.append('operations', serializeFetchParameter(clone, 'Payload'));\n\n      const map = {};\n      let i = 0;\n      files.forEach((paths) => {\n        map[++i] = paths;\n      });\n      form.append('map', JSON.stringify(map));\n\n      i = 0;\n      files.forEach((paths, file) => {\n        customFormDataAppendFile(form, ++i, file);\n      });\n\n      options.body = form;\n    } else {\n      if (\n        useGETForQueries &&\n        // If the operation contains some mutations GET shouldn’t be used.\n        !operation.query.definitions.some(\n          (definition) =>\n            definition.kind === 'OperationDefinition' &&\n            definition.operation === 'mutation'\n        )\n      )\n        options.method = 'GET';\n\n      if (options.method === 'GET') {\n        const { newURI, parseError } = rewriteURIForGET(uri, body);\n        if (parseError)\n          // Apollo’s `HttpLink` uses `fromError` for this, but it's not\n          // exported from `@apollo/client/link/http`.\n          return new Observable((observer) => {\n            observer.error(parseError);\n          });\n        uri = newURI;\n      } else options.body = serializeFetchParameter(clone, 'Payload');\n    }\n\n    const { controller } = createSignalIfSupported();\n\n    if (controller) {\n      if (options.signal)\n        // Respect the user configured abort controller signal.\n        options.signal.aborted\n          ? // Signal already aborted, so immediately abort.\n            controller.abort()\n          : // Signal not already aborted, so setup a listener to abort when it\n            // does.\n            options.signal.addEventListener(\n              'abort',\n              () => {\n                controller.abort();\n              },\n              {\n                // Prevent a memory leak if the user configured abort controller\n                // is long lasting, or controls multiple things.\n                once: true,\n              }\n            );\n\n      options.signal = controller.signal;\n    }\n\n    const runtimeFetch = customFetch || fetch;\n\n    return new Observable((observer) => {\n      // Used to track if the observable is being cleaned up.\n      let cleaningUp;\n\n      runtimeFetch(uri, options)\n        .then((response) => {\n          // Forward the response on the context.\n          operation.setContext({ response });\n          return response;\n        })\n        .then(parseAndCheckHttpResponse(operation))\n        .then((result) => {\n          observer.next(result);\n          observer.complete();\n        })\n        .catch((error) => {\n          // If the observable is being cleaned up, there is no need to call\n          // next or error because there are no more subscribers. An error after\n          // cleanup begins is likely from the cleanup function aborting the\n          // fetch.\n          if (!cleaningUp) {\n            // For errors such as an invalid fetch URI there will be no GraphQL\n            // result with errors or data to forward.\n            if (error.result && error.result.errors && error.result.data)\n              observer.next(error.result);\n\n            observer.error(error);\n          }\n        });\n\n      // Cleanup function.\n      return () => {\n        cleaningUp = true;\n\n        // Abort fetch. It’s ok to signal an abort even when not fetching.\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"script"}